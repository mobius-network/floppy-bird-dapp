upstream my_app {
  server unix:///var/run/puma/my_app.sock;
}

map $status $healthd_loggable {
  ~^[4]  0;
  default 1;
}

map $time_iso8601 $healthd_logsuffix {
    '~^(?<date>\d{4}-\d{2}-\d{2})T(?<hour>\d{2})'	$date-$hour;
    default						'default';
}

log_format healthd '$msec"$uri"'
                   '$status"$request_time"$upstream_response_time"'
                   '$http_x_forwarded_for';

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
# server port the client connected to
map $http_x_forwarded_port $proxy_x_forwarded_port {
  default $http_x_forwarded_port;
  ''      $server_port;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  ''      close;
}

# Set appropriate X-Forwarded-Ssl header
map $scheme $proxy_x_forwarded_ssl {
  default off;
  https on;
}

map "$proxy_x_forwarded_proto:$http_user_agent" $https_redirect {
  default                     1;
  "~^https:"                  0;
  "~^http:ELB-HealthChecker"  0;
}

proxy_http_version 1.1;
proxy_buffering off;
proxy_redirect off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header Referer $http_referer;
proxy_set_header Proxy "";  # Mitigate httpoxy attack
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;

# Apply fix for very long server names
server_names_hash_bucket_size 128;

server {
  listen 80;
  server_name _ localhost; # need to listen to localhost for worker tier

  access_log /var/log/nginx/access.log  main;
  access_log /var/log/nginx/healthd/application.log.$healthd_logsuffix healthd if=$healthd_loggable;

  # Force HTTPS
  if ($https_redirect = 1) {
    return 301 https://$http_host$request_uri;
  }

  # Don't advertise our version in Server header
  server_tokens off;

  root /var/app/current/public;
  try_files $uri $uri/index.html $uri.html @rails;
  error_page 500 502 503 504 /500.html;

  location @rails {
    proxy_pass http://my_app; # match the name of upstream directive which is defined above
  }

  location ^~ /assets/ {
    # To serve the pre-gzipped version of the files, if available.
    # The non-compressed versions MUST be available too, or a 404 will be returned.
    gzip_static on;
    gzip_vary on;
    gzip_proxied any;
    gzip_disable "MSIE [1-6]\.";
    gzip_types application/x-javascript text/css image/x-icon image/png image/jpeg image/gif;

    expires max;
    add_header Cache-Control public;

    if ($http_origin ~* '^https?://(flappy\.)?mobius\.network$') {
      add_header "Access-Control-Allow-Origin" "$http_origin";
      add_header 'Access-Control-Allow-Methods' 'GET, HEAD, OPTIONS';
      add_header 'Access-Control-Allow-Headers' '*';
    }

    try_files $uri @rails;
    error_page 404 /404.html;
  }
}
